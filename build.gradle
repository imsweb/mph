import com.vanniktech.maven.publish.JavaLibrary
import com.vanniktech.maven.publish.JavadocJar
import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'java-library'
    id 'jacoco'
    id 'com.vanniktech.maven.publish' version '0.31.0' // publish to Maven Central
    id 'com.github.ben-manes.versions' version '0.52.0' // check for out-of-date dependencies (run 'dependencyUpdates' manually)
    id 'com.github.spotbugs' version '6.4.2' // spotbugs code analysis
    id 'org.sonarqube' version '6.3.1.5724' // sonarQube analysis
}

group = 'com.imsweb'
version = file('VERSION').text
description = 'Java implementation of the Multiple Primary and Histology Coding Rules.'

println "Starting build using JDK ${Runtime.version().feature()}"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.imsweb:seerapi-client-java:5.9'
}

// enforce UTF-8, display the compilation warnings
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
}

tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('charSet', 'UTF-8')
    options.addBooleanOption('html5', true)
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Information Management Services Inc.',
                'Created-By': System.properties['java.vm.version'] + ' (' + System.properties['java.vm.vendor'] + ')',
                'Built-By': System.getProperty('user.name'),
                'Built-Date': new Date(),
                'Built-JDK': System.getProperty('java.version'),
                'Automatic-Module-Name': 'com.imsweb.mph'
        )
    }
}

// jacoco plugin settings
jacocoTestReport {
    reports {
        xml.required = true
    }
}
test.finalizedBy jacocoTestReport

// spotbugs plugin settings
spotbugs {
    ignoreFailures = false
    excludeFilter.set(project(':').file("config/spotbugs/spotbugs-exclude.xml"))
}

sonarqube {
    properties {
        property "sonar.projectKey", "imsweb_mph"
        property "sonar.organization", "imsweb"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.exclusions', '**/lab/*'
        property 'sonar.coverage.exclusions', '**/lab/*'
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

tasks.register('hematoDataTest', Test) {
    include '**/HematoDataTest.class'
}

// needed to deploy to Maven Central Portal
mavenPublishing {
    configure(new JavaLibrary(new JavadocJar.Javadoc(), true))

    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL, true) // to upgrade teh plugin, just remove the first parameter...
    signAllPublications()

    pom {
        name = 'MPH'
        description = 'Java implementation of the Multiple Primary and Histology Coding Rules.'
        url = 'https://github.com/imsweb/mph'
        inceptionYear = '2016'

        licenses {
            license {
                name = 'A modified BSD License (BSD)'
                url = 'https://github.com/imsweb/mph/blob/master/LICENSE'
                distribution = 'repo'
            }
        }

        developers {
            developer {
                id = 'depryf'
                name = 'Fabian Depry'
                email = 'depryf@imsweb.com'
            }
        }

        scm {
            url = 'https://github.com/imsweb/mph'
            connection = 'scm:https://github.com/imsweb/mph.git'
            developerConnection = 'scm:git@github.com:imsweb/mph.git'
        }
    }
}

// Gradle wrapper, this allows to build the project without having to install Gradle!
wrapper {
    gradleVersion = '8.14'
    distributionType = Wrapper.DistributionType.ALL
}
